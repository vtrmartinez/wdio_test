'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var run = function () {
  var _ref2 = (0, _bluebird.coroutine)(function* (_ref) {
    var defaultTimeout = _ref.defaultTimeout,
        scenarioResult = _ref.scenarioResult,
        step = _ref.step,
        stepDefinition = _ref.stepDefinition,
        parameterTypeRegistry = _ref.parameterTypeRegistry,
        world = _ref.world;

    beginTiming();
    var error = void 0,
        result = void 0,
        parameters = void 0;

    try {
      parameters = yield _bluebird2.default.all(stepDefinition.getInvocationParameters({
        scenarioResult: scenarioResult,
        step: step,
        parameterTypeRegistry: parameterTypeRegistry
      }));
    } catch (err) {
      error = err;
    }

    if (!error) {
      var timeoutInMilliseconds = stepDefinition.options.timeout || defaultTimeout;

      var validCodeLengths = stepDefinition.getValidCodeLengths(parameters);
      if (_lodash2.default.includes(validCodeLengths, stepDefinition.code.length)) {
        var data = yield _user_code_runner2.default.run({
          argsArray: parameters,
          fn: stepDefinition.code,
          thisArg: world,
          timeoutInMilliseconds: timeoutInMilliseconds
        });
        error = data.error;
        result = data.result;
      } else {
        error = stepDefinition.getInvalidCodeLengthMessage(parameters);
      }
    }

    var testStepResult = { duration: endTiming() };

    if (result === 'pending') {
      testStepResult.status = _status2.default.PENDING;
    } else if (error) {
      testStepResult.exception = error;
      testStepResult.status = _status2.default.FAILED;
    } else {
      testStepResult.status = _status2.default.PASSED;
    }

    return testStepResult;
  });

  return function run(_x) {
    return _ref2.apply(this, arguments);
  };
}();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _status = require('../status');

var _status2 = _interopRequireDefault(_status);

var _time = require('../time');

var _time2 = _interopRequireDefault(_time);

var _user_code_runner = require('../user_code_runner');

var _user_code_runner2 = _interopRequireDefault(_user_code_runner);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var beginTiming = _time2.default.beginTiming,
    endTiming = _time2.default.endTiming;
exports.default = { run: run };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ydW50aW1lL3N0ZXBfcnVubmVyLmpzIl0sIm5hbWVzIjpbImRlZmF1bHRUaW1lb3V0Iiwic2NlbmFyaW9SZXN1bHQiLCJzdGVwIiwic3RlcERlZmluaXRpb24iLCJwYXJhbWV0ZXJUeXBlUmVnaXN0cnkiLCJ3b3JsZCIsImJlZ2luVGltaW5nIiwiZXJyb3IiLCJyZXN1bHQiLCJwYXJhbWV0ZXJzIiwiYWxsIiwiZ2V0SW52b2NhdGlvblBhcmFtZXRlcnMiLCJlcnIiLCJ0aW1lb3V0SW5NaWxsaXNlY29uZHMiLCJvcHRpb25zIiwidGltZW91dCIsInZhbGlkQ29kZUxlbmd0aHMiLCJnZXRWYWxpZENvZGVMZW5ndGhzIiwiaW5jbHVkZXMiLCJjb2RlIiwibGVuZ3RoIiwiZGF0YSIsInJ1biIsImFyZ3NBcnJheSIsImZuIiwidGhpc0FyZyIsImdldEludmFsaWRDb2RlTGVuZ3RoTWVzc2FnZSIsInRlc3RTdGVwUmVzdWx0IiwiZHVyYXRpb24iLCJlbmRUaW1pbmciLCJzdGF0dXMiLCJQRU5ESU5HIiwiZXhjZXB0aW9uIiwiRkFJTEVEIiwiUEFTU0VEIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozt1Q0FRQSxpQkFPRztBQUFBLFFBTkRBLGNBTUMsUUFOREEsY0FNQztBQUFBLFFBTERDLGNBS0MsUUFMREEsY0FLQztBQUFBLFFBSkRDLElBSUMsUUFKREEsSUFJQztBQUFBLFFBSERDLGNBR0MsUUFIREEsY0FHQztBQUFBLFFBRkRDLHFCQUVDLFFBRkRBLHFCQUVDO0FBQUEsUUFEREMsS0FDQyxRQUREQSxLQUNDOztBQUNEQztBQUNBLFFBQUlDLGNBQUo7QUFBQSxRQUFXQyxlQUFYO0FBQUEsUUFBbUJDLG1CQUFuQjs7QUFFQSxRQUFJO0FBQ0ZBLG1CQUFhLE1BQU0sbUJBQVFDLEdBQVIsQ0FDakJQLGVBQWVRLHVCQUFmLENBQXVDO0FBQ3JDVixzQ0FEcUM7QUFFckNDLGtCQUZxQztBQUdyQ0U7QUFIcUMsT0FBdkMsQ0FEaUIsQ0FBbkI7QUFPRCxLQVJELENBUUUsT0FBT1EsR0FBUCxFQUFZO0FBQ1pMLGNBQVFLLEdBQVI7QUFDRDs7QUFFRCxRQUFJLENBQUNMLEtBQUwsRUFBWTtBQUNWLFVBQU1NLHdCQUNKVixlQUFlVyxPQUFmLENBQXVCQyxPQUF2QixJQUFrQ2YsY0FEcEM7O0FBR0EsVUFBTWdCLG1CQUFtQmIsZUFBZWMsbUJBQWYsQ0FBbUNSLFVBQW5DLENBQXpCO0FBQ0EsVUFBSSxpQkFBRVMsUUFBRixDQUFXRixnQkFBWCxFQUE2QmIsZUFBZWdCLElBQWYsQ0FBb0JDLE1BQWpELENBQUosRUFBOEQ7QUFDNUQsWUFBTUMsT0FBTyxNQUFNLDJCQUFlQyxHQUFmLENBQW1CO0FBQ3BDQyxxQkFBV2QsVUFEeUI7QUFFcENlLGNBQUlyQixlQUFlZ0IsSUFGaUI7QUFHcENNLG1CQUFTcEIsS0FIMkI7QUFJcENRO0FBSm9DLFNBQW5CLENBQW5CO0FBTUFOLGdCQUFRYyxLQUFLZCxLQUFiO0FBQ0FDLGlCQUFTYSxLQUFLYixNQUFkO0FBQ0QsT0FURCxNQVNPO0FBQ0xELGdCQUFRSixlQUFldUIsMkJBQWYsQ0FBMkNqQixVQUEzQyxDQUFSO0FBQ0Q7QUFDRjs7QUFFRCxRQUFNa0IsaUJBQWlCLEVBQUVDLFVBQVVDLFdBQVosRUFBdkI7O0FBRUEsUUFBSXJCLFdBQVcsU0FBZixFQUEwQjtBQUN4Qm1CLHFCQUFlRyxNQUFmLEdBQXdCLGlCQUFPQyxPQUEvQjtBQUNELEtBRkQsTUFFTyxJQUFJeEIsS0FBSixFQUFXO0FBQ2hCb0IscUJBQWVLLFNBQWYsR0FBMkJ6QixLQUEzQjtBQUNBb0IscUJBQWVHLE1BQWYsR0FBd0IsaUJBQU9HLE1BQS9CO0FBQ0QsS0FITSxNQUdBO0FBQ0xOLHFCQUFlRyxNQUFmLEdBQXdCLGlCQUFPSSxNQUEvQjtBQUNEOztBQUVELFdBQU9QLGNBQVA7QUFDRCxHOztrQkF0RGNMLEc7Ozs7O0FBUmY7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztJQUdRaEIsVyxrQkFBQUEsVztJQUFhdUIsUyxrQkFBQUEsUztrQkEwRE4sRUFBRVAsUUFBRixFIiwiZmlsZSI6InN0ZXBfcnVubmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJ1xuaW1wb3J0IFN0YXR1cyBmcm9tICcuLi9zdGF0dXMnXG5pbXBvcnQgVGltZSBmcm9tICcuLi90aW1lJ1xuaW1wb3J0IFVzZXJDb2RlUnVubmVyIGZyb20gJy4uL3VzZXJfY29kZV9ydW5uZXInXG5pbXBvcnQgUHJvbWlzZSBmcm9tICdibHVlYmlyZCdcblxuY29uc3QgeyBiZWdpblRpbWluZywgZW5kVGltaW5nIH0gPSBUaW1lXG5cbmFzeW5jIGZ1bmN0aW9uIHJ1bih7XG4gIGRlZmF1bHRUaW1lb3V0LFxuICBzY2VuYXJpb1Jlc3VsdCxcbiAgc3RlcCxcbiAgc3RlcERlZmluaXRpb24sXG4gIHBhcmFtZXRlclR5cGVSZWdpc3RyeSxcbiAgd29ybGRcbn0pIHtcbiAgYmVnaW5UaW1pbmcoKVxuICBsZXQgZXJyb3IsIHJlc3VsdCwgcGFyYW1ldGVyc1xuXG4gIHRyeSB7XG4gICAgcGFyYW1ldGVycyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgc3RlcERlZmluaXRpb24uZ2V0SW52b2NhdGlvblBhcmFtZXRlcnMoe1xuICAgICAgICBzY2VuYXJpb1Jlc3VsdCxcbiAgICAgICAgc3RlcCxcbiAgICAgICAgcGFyYW1ldGVyVHlwZVJlZ2lzdHJ5XG4gICAgICB9KVxuICAgIClcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3IgPSBlcnJcbiAgfVxuXG4gIGlmICghZXJyb3IpIHtcbiAgICBjb25zdCB0aW1lb3V0SW5NaWxsaXNlY29uZHMgPVxuICAgICAgc3RlcERlZmluaXRpb24ub3B0aW9ucy50aW1lb3V0IHx8IGRlZmF1bHRUaW1lb3V0XG5cbiAgICBjb25zdCB2YWxpZENvZGVMZW5ndGhzID0gc3RlcERlZmluaXRpb24uZ2V0VmFsaWRDb2RlTGVuZ3RocyhwYXJhbWV0ZXJzKVxuICAgIGlmIChfLmluY2x1ZGVzKHZhbGlkQ29kZUxlbmd0aHMsIHN0ZXBEZWZpbml0aW9uLmNvZGUubGVuZ3RoKSkge1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IFVzZXJDb2RlUnVubmVyLnJ1bih7XG4gICAgICAgIGFyZ3NBcnJheTogcGFyYW1ldGVycyxcbiAgICAgICAgZm46IHN0ZXBEZWZpbml0aW9uLmNvZGUsXG4gICAgICAgIHRoaXNBcmc6IHdvcmxkLFxuICAgICAgICB0aW1lb3V0SW5NaWxsaXNlY29uZHNcbiAgICAgIH0pXG4gICAgICBlcnJvciA9IGRhdGEuZXJyb3JcbiAgICAgIHJlc3VsdCA9IGRhdGEucmVzdWx0XG4gICAgfSBlbHNlIHtcbiAgICAgIGVycm9yID0gc3RlcERlZmluaXRpb24uZ2V0SW52YWxpZENvZGVMZW5ndGhNZXNzYWdlKHBhcmFtZXRlcnMpXG4gICAgfVxuICB9XG5cbiAgY29uc3QgdGVzdFN0ZXBSZXN1bHQgPSB7IGR1cmF0aW9uOiBlbmRUaW1pbmcoKSB9XG5cbiAgaWYgKHJlc3VsdCA9PT0gJ3BlbmRpbmcnKSB7XG4gICAgdGVzdFN0ZXBSZXN1bHQuc3RhdHVzID0gU3RhdHVzLlBFTkRJTkdcbiAgfSBlbHNlIGlmIChlcnJvcikge1xuICAgIHRlc3RTdGVwUmVzdWx0LmV4Y2VwdGlvbiA9IGVycm9yXG4gICAgdGVzdFN0ZXBSZXN1bHQuc3RhdHVzID0gU3RhdHVzLkZBSUxFRFxuICB9IGVsc2Uge1xuICAgIHRlc3RTdGVwUmVzdWx0LnN0YXR1cyA9IFN0YXR1cy5QQVNTRURcbiAgfVxuXG4gIHJldHVybiB0ZXN0U3RlcFJlc3VsdFxufVxuXG5leHBvcnQgZGVmYXVsdCB7IHJ1biB9XG4iXX0=